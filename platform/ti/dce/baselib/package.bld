/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 *  ======== ipumm/platform/ti/dce/baselib/package.bld ========
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');
var compileOpts = " "
var waval = 0;

var commonBld = xdc.loadCapsule("../build/common.bld");

var SRC_FILES_APP = [
     "ipumm_main.c",
     "ping_tasks.c",
     "load_task.c",
     "iresman_tiledmemory.c"
];

var SRC_FILES_SYS = [
];

coreNames = commonBld.getCores(arguments);
/* select default as ipu */
if (coreNames.length==0) {
    coreNames[0] = "ipu";
}

var profiles  = commonBld.getProfiles(arguments);
/* If no profiles were assigned, build for release */
if (profiles.length == 0) {
    profiles[0] = "release";
}


for (var i = 0; i < Build.targets.length; i++) {

    var targ = Build.targets[i];

    for (var j = 0; j < coreNames.length; j++) {
        var coreName = coreNames[j];

        var cfgFileName = 'dce_' + coreName + '.cfg';

        if(coreName.match(/sys_m3/)){
            var SRC_FILES = SRC_FILES_SYS;
        }

        if(coreName.match(/ipu/)){
            var SRC_FILES = SRC_FILES_APP;
        }

        for( var k = 0; k< profiles.length; k++)
        {
            var profile        = profiles[k];
            var profileOpts    = commonBld.buildOptions(arguments, compileOpts, coreName);


            var lib_name = 'lib/' + coreName + '/' + profile + '/' + coreName;
            var lib_name_qnx = 'lib/' + coreName + '/' + profile + '/' + "qnx_ipu";

            print ("config file: " + cfgFileName + "\n");
            print ("profile: " + profile + "\n");
            print(profileOpts+"\r\n");
            print("HwType = " + HwType);
            print("HwVer = " + HwVer);

            var mylib = Pkg.addLibrary(lib_name, targ,
                {profile:profile, copts: profileOpts });

            mylib.addObjects(SRC_FILES);

            var qnxLib = Pkg.addLibrary(lib_name_qnx, targ,
                {profile:profile, copts: profileOpts,
                           defs: "-D BUILD_FOR_QNX" });

            qnxLib.addObjects(SRC_FILES);
        }
    }
}
