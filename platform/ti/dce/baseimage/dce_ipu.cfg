/*
 * Copyright (c) 2011, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


var hw_OMAP4 = 0;
var hw_OMAP5 = 1;
var hw_VAYU = 2;
var VIRTIO = 0;
var ZEBU = 0;
var ES10 = 1;
var ES20 = 2;

var Program			= xdc.useModule('xdc.cfg.Program');

var cfgArgs = prog.build.cfgArgs;

Program.global.HwType = cfgArgs.HwType;
Program.global.enableSMP = cfgArgs.enableSMP;
Program.global.HwVer = cfgArgs.HwVer;
Program.global.coreName = "ipu";

print("HwType = " + Program.global.HwType);
print("HwVer = " + Program.global.HwVer);

if(Program.global.HwType == hw_VAYU)
{
    xdc.loadCapsule("platform/ti/configs/vayu/IpcCommon.cfg.xs");
    xdc.loadCapsule("platform/ti/configs/vayu/Ipu2Smp.cfg");
    xdc.loadCapsule("platform/ti/configs/vayu/IpuAmmu.cfg");
}
else if(Program.global.HwType == hw_OMAP4)
{
    xdc.loadCapsule("platform/ti/configs/omap44xx/IpcCommon.cfg.xs");
    xdc.loadCapsule("platform/ti/configs/omap44xx/IpuSmp.cfg");
    xdc.loadCapsule("platform/ti/configs/omap44xx/IpuAmmu.cfg");
}
else
{
    xdc.loadCapsule("platform/ti/configs/omap54xx/IpcCommon.cfg.xs");
    xdc.loadCapsule("platform/ti/configs/omap54xx/IpuSmp.cfg");
    xdc.loadCapsule("platform/ti/configs/omap54xx/IpuAmmu.cfg");

}

xdc.loadPackage('ti.ipc.mm');
xdc.useModule('ti.ipc.ipcmgr.IpcMgr');
xdc.loadPackage('ti.srvmgr');
xdc.loadPackage('ti.srvmgr.omaprpc');

xdc.useModule('platform.ti.dce.baselib.BASELIB');

var Memory			= xdc.useModule('xdc.runtime.Memory');
var HeapMem			= xdc.useModule('ti.sysbios.heaps.HeapMem');
var GateHwi			= xdc.useModule('ti.sysbios.gates.GateHwi');
HeapMem.common$.gate = GateHwi.create();

/* Heap Memory is set to 40 MB of the total 150 MB of EXT_HEAP.
 * This is considering 2 1080p instances of Mpeg4 Decoders, each
 * requiring 14 MBs and a single instance of H264 Encode requiring
 * 8 MBs running parallely.
 */

var heapMemParams			= new HeapMem.Params;
heapMemParams.size			= 0x2800000; // 40MB
heapMemParams.sectionName	= ".systemHeap";
var heap0					= HeapMem.create(heapMemParams);
Memory.defaultHeapInstance	= heap0;
Program.global.heap0		= heap0;

/*
 * Setup memory map.
 */

/* Mark heaps as NOINIT for optimizing boot-time */
Program.sectMap[".systemHeap"] = new Program.SectionSpec();
Program.sectMap[".systemHeap"].loadSegment = "EXT_HEAP";
Program.sectMap[".systemHeap"].type = "NOINIT";

/* Work-around for .const loading issues with MPEG4/VC1 codecs.. move AMMU
 * tables out of .const into .txt so that they have valid data when AMMU
 * is programmed (which happens before cinit initializes rw sections..
 * which is what .const becomes due to rw var mistakenly placed on .const
 */
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_mmuInitConfig__C"] = "EXT_CODE";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numLargePages__C"] = "EXT_CODE";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numLinePages__C"] = "EXT_CODE";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numMediumPages__C"] = "EXT_CODE";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numSmallPages__C"] = "EXT_CODE";

/* ----------------------------- VERSION CONFIGURATION ---------------------*/
var commonBld = xdc.loadCapsule("build/common.bld");
commonBld.GetVersionTag();

/*
 *  ======== CODEC ENGINE configurations  ========
 */

var Global = xdc.useModule('ti.sdo.ce.osal.Global');
Global.runtimeEnv = Global.DSPBIOS;

xdc.useModule('ti.sdo.ce.global.Settings').profile    = "debug";
xdc.loadPackage('ti.sdo.ce.video').profile            = "debug";
xdc.loadPackage('ti.sdo.ce.video3').profile           = "debug";
xdc.loadPackage('ti.sdo.ce.alg').profile              = "debug";
xdc.useModule('ti.sdo.fc.global.Settings').profile    = "debug";
xdc.loadPackage('ti.sdo.fc.rman').profile             = "debug";
xdc.loadPackage('ti.sdo.fc.ires.hdvicp').profile      = "debug";
xdc.loadPackage('ti.sdo.fc.utils').profile            = "debug";

var ipcSettings = xdc.useModule('ti.sdo.ce.ipc.Settings');
ipcSettings.ipc = xdc.useModule('ti.sdo.ce.ipc.bios.Ipc');
// set to true to enable debugging of codec engine
xdc.useModule('ti.sdo.ce.Settings').checked         = true;

/* Enable Memory Translation module that operates on the BIOS Resource Table */
var Resource = xdc.useModule('ti.ipc.remoteproc.Resource');
Resource.customTable = true;

//set All heaps of dskts as the default heap0
var DSKT2           = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
DSKT2.DARAM0    = "heap0";
DSKT2.DARAM1    = "heap0";
DSKT2.DARAM2    = "heap0";
DSKT2.SARAM0    = "heap0";
DSKT2.SARAM1    = "heap0";
DSKT2.SARAM2    = "heap0";
DSKT2.ESDATA    = "heap0";
DSKT2.IPROG     = "heap0";
DSKT2.EPROG     = "heap0";
DSKT2.DSKT2_HEAP     = "heap0";

var HDVICP20= xdc.useModule('ti.sdo.codecs.hdvicp20api.HDVICP20API');

//Remove these as it is done in ivahd.c
var HDVICP2                      = xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP2');
HDVICP2.memoryBaseAddress[0]     = 0xBB000000;
HDVICP2.registerBaseAddress[0]   = 0xBA000000;
if(Program.global.HwType == hw_OMAP5) {
    if(Program.global.HwVer == ES20) {
        print("Benelli Omap5: Setting PRCM Addresses ES2.0");
        HDVICP2.resetControlAddress[0]      = 0xAAE07210;
    }
    else {
        print("Benelli Omap5: Setting PRCM Addresses ES1.0");
        HDVICP2.resetControlAddress[0]      = 0xAAE06F10;
    }
}
else if(Program.global.HwType == hw_VAYU) {
    if(Program.global.HwVer == ES10) {
        print("Benelli Vayu: Setting PRCM Addresses ES1.0");
        HDVICP2.memoryBaseAddress[0]     = 0x7B000000;
        HDVICP2.registerBaseAddress[0]   = 0x7A000000;
        HDVICP2.resetControlAddress[0]      = 0x6AE07210;
    }
    else {
        print("Benelli Vayu: E2.0 not there yet!!!!!!!!");
    }
}
else {
    HDVICP2.resetControlAddress[0]      = 0xAA306F10;
    print("Ducati omap4: Setting PRCM Addresses ES2.x");
}
HDVICP2.resetFxn                 = "ivahd_reset";

xdc.useModule('ti.sdo.fc.rman.RMAN');

// Load decoder/encoder APIs:
var VIDDEC3 = xdc.useModule('ti.sdo.ce.video3.IVIDDEC3');
var VIDENC2 = xdc.useModule('ti.sdo.ce.video2.IVIDENC2');

// load whatever codecs are available in the build
var codecs = [];

function loadCodec(pkg, name)
{
	try {
		var codec = xdc.useModule(pkg);
		print('loading: ' + name);
		codecs.push({ name: name, mod: codec, local: true });
	} catch(e) {
		print('no package: ' + pkg);
	}
}

loadCodec('ti.sdo.codecs.mpeg4vdec.ce.MPEG4VDEC', 'ivahd_mpeg4dec');
loadCodec('ti.sdo.codecs.h264vdec.ce.H264VDEC',   'ivahd_h264dec');
loadCodec('ti.sdo.codecs.jpegvdec.ce.JPEGVDEC',  'ivahd_jpegvdec');
loadCodec('ti.sdo.codecs.jpegvenc.ce.JPEGVENC',  'ivahd_jpegvenc');
loadCodec('ti.sdo.codecs.vc1vdec.ce.VC1VDEC',    'ivahd_vc1vdec');
loadCodec('ti.sdo.codecs.mpeg2vdec.ce.MPEG2VDEC','ivahd_mpeg2vdec');
loadCodec('ti.sdo.codecs.h264enc.ce.H264ENC',    'ivahd_h264enc');
loadCodec('ti.sdo.codecs.mpeg4enc.ce.MPEG4ENC',  'ivahd_mpeg4enc');

var engine         = xdc.useModule('ti.sdo.ce.Engine');
var myEngine       = engine.create("ivahd_vidsvr", codecs);

xdc.useModule('ti.sysbios.knl.Task');
var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.defaultStackSize = 12 * 0x400;

// Enable load computation.
var Load = xdc.useModule('ti.sysbios.utils.Load');
Load.updateInIdle = true;
Load.windowInMs = 11;

/* ----------------------------- Configure BIOS--------------------------------*/

BIOS                = xdc.useModule('ti.sysbios.BIOS');
BIOS.addUserStartupFunction('&IpcMgr_rpmsgStartup');

BIOS.clockEnabled   = true;
BIOS.libType = BIOS.LibType_Custom;
if(Program.global.enableSMP)
{
    print("SMP Enabled BIOS");
/* --- SMP is enabled using a common BIOS version ----------*/
    BIOS.smpEnabled = true;
/* ---- disabling BIOS logs and asserts for performance ----*/
    BIOS.logsEnabled = false;
    BIOS.assertsEnabled = false;
}
else
{
/* --- SMP is enabled using a common BIOS version ----------*/
    BIOS.smpEnabled = false;
}

var Settings = xdc.useModule('ti.posix.tirtos.Settings');
Settings.enableMutexPriority = true;

var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
if(Program.global.HwType == hw_OMAP5)
{
    /*
    The value in Timer.intFreq.lo need to match the configured value of
    register CM_CLKSEL_SYS.SYS_CLKSEL.
    For OMAP5, the SYSCLK is set to 19.2MHz.
    */
    Timer.intFreq.hi = 0;
    Timer.intFreq.lo = 19200000;
}
else if(Program.global.HwType == hw_OMAP4)
{
    /*
    The value in Timer.intFreq.lo need to match the configured value of
    register CM_CLKSEL_SYS.SYS_CLKSEL.
    For OMAP4, the SYSCLK is set to 19.2MHz.
    */
    Timer.intFreq.hi = 0;
    Timer.intFreq.lo = 19200000;
}
else if(Program.global.HwType == hw_VAYU)
{
    /*
    The value in Timer.intFreq.lo need to match the configured value of
    register CM_CLKSEL_SYS.SYS_CLKSEL.
    For Vayu (DRA7xx), the SYSCLK is set to 20MHz.
    */
    Timer.intFreq.hi = 0;
    Timer.intFreq.lo = 20000000;
}

/* IPC 3.x is no longer providing version capability. If needed, then IPC needs to implement it. */
    /* Version module; this will produce a .version section with trees infos. Read
     * with "readelf -p .version <base_image>" */
//    xdc.useModule('ti.utils.Version');

/*************************/
/* PSI KPI hooks - begin */
/*************************/
if (cfgArgs.psi_kpi_hooks) {
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
/* Enable instance names */
Task.common$.namedInstance = true;
Swi.common$.namedInstance = true;
Hwi.common$.namedInstance = true;
/* Define and add one Task Hook Set */
Task.addHookSet({
switchFxn: '&psi_kpi_task_switch',
});
Swi.addHookSet({
beginFxn: '&psi_kpi_swi_begin',
endFxn: '&psi_kpi_swi_end',
});
Hwi.addHookSet({
beginFxn: '&psi_kpi_hwi_begin',
endFxn: '&psi_kpi_hwi_end',
});
}/*cfgArgs.psi_kpi_inst*/
/*************************/
/* PSI KPI hooks - end   */
/*************************/
